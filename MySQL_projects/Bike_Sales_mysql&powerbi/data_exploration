USE adventureworks;

-- Total revenue calculation
SELECT 
    SUM(sales.order_quantity * products.product_price) AS total_revenue 
FROM 
    sales 
LEFT JOIN 
    products ON sales.product_id = products.product_id;
  
-- Profit calculation  
SELECT 
    SUM(sales.order_quantity * products.product_price) - 
    SUM(sales.order_quantity * products.product_cost) AS total_profit 
FROM 
    sales 
LEFT JOIN 
    products ON sales.product_id = products.product_id;
  
-- Total orders
SELECT 
    COUNT(DISTINCT order_number) AS total_orders
FROM 
    sales;

-- Total quantity sold 
SELECT
    SUM(order_quantity) AS total_quantity_sold
FROM 
    sales;

-- Return rate
SELECT
    ROUND(SUM(return_quantity) / (
        SELECT 
            SUM(order_quantity) AS total_quantity_sold 
        FROM 
            sales
    ) * 100, 2) AS return_rate
FROM 
    returns;

-- Total customers
SELECT 
    COUNT(DISTINCT customer_id) AS Total_Customers
FROM 
    sales;

-- Revenue per customer
SELECT 
    ROUND(SUM(sales.order_quantity * products.product_price) / (
        SELECT 
            COUNT(DISTINCT customer_id) AS Total_Customers
        FROM 
            sales), 2) AS Revenue_per_customer
FROM 
    sales 
LEFT JOIN 
    products ON sales.product_id = products.product_id;
  
-- Orders by Category
SELECT 
    categories.category_name,
    COUNT(DISTINCT order_number) AS total_orders
FROM 
    sales 
INNER JOIN 
    products ON products.product_id = sales.product_id
INNER JOIN 
    product_subcategories ON product_subcategories.product_subcategory_id = products.product_subcategory_id
INNER JOIN 
    categories ON product_subcategories.category_id = categories.category_id
GROUP BY 
    categories.category_name;

-- Top 10 products by orders, revenue and return %

SELECT 
    products.product_name,
    Orders.Orders AS Orders,
    Total_Revenue.Revenue AS Revenue,
    ROUND(COALESCE(Returns.ReturnRate, 0), 2) AS ReturnRate
FROM 
    (
        SELECT 
            products.product_id,
            COUNT(DISTINCT sales.order_number) AS Orders
        FROM 
            sales 
        INNER JOIN 
            products ON products.product_id = sales.product_id
        GROUP BY 
            products.product_id
    ) AS Orders
LEFT JOIN 
    (
        SELECT 
            sales.product_id,
            SUM(sales.order_quantity * products.product_price) AS Revenue
        FROM 
            sales 
        LEFT JOIN 
            products ON sales.product_id = products.product_id
        GROUP BY 
            sales.product_id
    ) AS Total_Revenue ON Orders.product_id = Total_Revenue.product_id
LEFT JOIN 
    (
        SELECT 
            returns.product_id,
            ROUND(SUM(returns.return_quantity) / NULLIF(total_sales.total_quantity_sold, 0) * 100, 2) AS ReturnRate
        FROM 
            returns
        INNER JOIN 
            (
                SELECT 
                    sales.product_id,
                    SUM(sales.order_quantity) AS total_quantity_sold
                FROM 
                    sales
                INNER JOIN 
                    products ON products.product_id = sales.product_id
                GROUP BY 
                    sales.product_id
            ) AS total_sales ON total_sales.product_id = returns.product_id
        GROUP BY 
            returns.product_id
    ) AS Returns ON Orders.product_id = Returns.product_id
LEFT JOIN 
    products ON Orders.product_id = products.product_id
ORDER BY 
    Orders.Orders DESC, 
    Total_Revenue.Revenue DESC -- Secondary criterion for tie-breaking
LIMIT 10;

-- Most Ordered Product Type
SELECT 
    product_subcategories.subcategory_name AS most_ordered_product_type
FROM 
    product_subcategories
INNER JOIN 
    products ON products.product_subcategory_id = product
